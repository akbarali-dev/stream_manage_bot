CREATE OR REPLACE FUNCTION notify_data_inserted()
RETURNS trigger AS $$
BEGIN
    if NEW.send_bot or NEW.send_channel then
    PERFORM pg_notify('data_change', json_build_object(
                'payload', 'Yangi ma\shildi: ' || NEW.id,
                'send_bot', NEW.send_bot,
                'send_channel', NEW.send_channel
            )::text);
    RETURN NEW;
    end if;
END;
$$ LANGUAGE plpgsql;

create or REPLACE function notify_data_inserted() returns trigger
    language plpgsql
as
$$
BEGIN
    if (NEW.send_bot or NEW.send_channel) and NEW.file_id IS NOT NULL then
    PERFORM pg_notify('data_change', json_build_object(
                'payload', 'Yangi ma\shildi: ' || NEW.id,
                'send_bot', NEW.send_bot,
                'send_channel', NEW.send_channel,
                'description', NEW.description,
                'stream_link', NEW.stream_link,
                'file_id', NEW.file_id
            )::text);
    RETURN NEW;
    end if;
    RETURN NEW;
END;
$$;

CREATE or replace TRIGGER data_insert_trigger
AFTER INSERT ON competition
FOR EACH ROW EXECUTE FUNCTION notify_data_inserted();


CREATE or replace TRIGGER data_update_trigger
AFTER UPDATE ON competition
FOR EACH ROW EXECUTE FUNCTION notify_data_inserted();